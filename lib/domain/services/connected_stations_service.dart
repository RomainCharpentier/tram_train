import 'package:train_qil/domain/models/station.dart';
import 'package:train_qil/domain/models/train.dart';
import 'package:train_qil/infrastructure/dependency_injection.dart';

/// Service pour g√©rer les connexions entre gares
class ConnectedStationsService {
  /// R√©cup√®re les gares connect√©es √† une gare donn√©e (destinations finales uniquement)
  static Future<List<Station>> getConnectedStations(Station station) async {
    print('üîç Recherche des gares connect√©es pour: ${station.name} (ID: ${station.id})');
    
    try {
      final trainService = DependencyInjection.instance.trainService;
      
      // Utiliser l'API SNCF pour r√©cup√©rer les d√©parts depuis cette gare
      print('üåê Appel API SNCF pour: ${station.name}');
      final departures = await trainService.getNextDepartures(station);
      
      // Extraire seulement les destinations finales (pas les arr√™ts interm√©diaires)
      final allDestinations = <String, Station>{};
      
      for (final departure in departures) {
        final direction = departure.direction;
        if (direction.isNotEmpty && !allDestinations.containsKey(direction)) {
          allDestinations[direction] = Station(
            id: 'TEMP_${direction.hashCode}',
            name: direction,
            description: 'Destination depuis ${station.name}',
          );
        }
      }
      
      print('üìç Destinations finales trouv√©es via API: ${allDestinations.length}');
      for (final destination in allDestinations.values) {
        print('  - ${destination.name} (${destination.id})');
      }
      
      return allDestinations.values.toList();
      
    } catch (e) {
      print('‚ùå Erreur API pour ${station.name}: $e');
      
      // Fallback : retourner une liste vide pour forcer la recherche globale
      print('üìç Aucune connexion trouv√©e - Recherche globale recommand√©e');
      return [];
    }
  }
  
  /// V√©rifie si deux gares sont connect√©es directement
  static Future<bool> areStationsConnected(Station departure, Station arrival, {bool directOnly = true}) async {
    print('üîç V√©rification de connexion: ${departure.name} ‚Üí ${arrival.name} (direct uniquement: $directOnly)');
    
    try {
      final trainService = DependencyInjection.instance.trainService;
      
      // Utiliser l'API des trajets pour v√©rifier s'il existe un trajet direct
      print('üåê V√©rification via API des trajets: ${departure.name} ‚Üí ${arrival.name}');
      final journeys = await trainService.findJourneysBetween(departure, arrival);
      
      // Filtrer les trajets selon le crit√®re (direct ou tous)
      List<Train> filteredJourneys = journeys;
      if (directOnly) {
        // Filtrer pour ne garder que les trajets directs
        filteredJourneys = journeys.where((journey) => journey.isDirect).toList();
        print('üîç Filtrage des trajets directs: ${journeys.length} ‚Üí ${filteredJourneys.length}');
      }
      
      final isConnected = filteredJourneys.isNotEmpty;
      
      print('üöÇ Trajets trouv√©s: ${journeys.length} (filtr√©s: ${filteredJourneys.length})');
      if (filteredJourneys.isNotEmpty) {
        print('‚úÖ R√©sultat: CONNECT√â - ${filteredJourneys.length} trajet(s) trouv√©(s)');
        
        // Afficher les d√©tails des trajets pour debug
        for (int i = 0; i < filteredJourneys.length && i < 3; i++) {
          final journey = filteredJourneys[i];
          print('  Trajet ${i + 1}: ${journey.direction} (${journey.status})');
        }
        if (filteredJourneys.length > 3) {
          print('  ... et ${filteredJourneys.length - 3} autres trajets');
        }
      } else {
        print('‚ùå R√©sultat: NON CONNECT√â - Aucun trajet trouv√©');
      }
      
      return isConnected;
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification de connexion: $e');
      
      // Fallback : v√©rifier via les destinations finales
      print('üîÑ Fallback: v√©rification via destinations finales');
      try {
        final connectedStations = await getConnectedStations(departure);
        final isConnected = connectedStations.any((s) =>
            _areStationNamesSimilar(s.name, arrival.name) || s.id == arrival.id);
        
        print('üìç Gares connect√©es disponibles: ${connectedStations.length}');
        for (var s in connectedStations) {
          print('  - ${s.name} (${s.id})');
        }
        print('‚úÖ R√©sultat fallback: ${isConnected ? 'CONNECT√â' : 'NON CONNECT√â'}');
        return isConnected;
      } catch (fallbackError) {
        print('‚ùå Erreur fallback: $fallbackError');
        return false;
      }
    }
  }
  
  /// Compare deux noms de gares de mani√®re flexible
  static bool _areStationNamesSimilar(String name1, String name2) {
    // Normaliser les noms (supprimer les parenth√®ses, tirets, espaces multiples)
    final normalized1 = name1
        .replaceAll(RegExp(r'[()\-]'), ' ')
        .replaceAll(RegExp(r'\s+'), ' ')
        .trim()
        .toLowerCase();
    
    final normalized2 = name2
        .replaceAll(RegExp(r'[()\-]'), ' ')
        .replaceAll(RegExp(r'\s+'), ' ')
        .trim()
        .toLowerCase();
    
    // V√©rifier l'√©galit√© exacte ou si un nom contient l'autre
    return normalized1 == normalized2 || 
           normalized1.contains(normalized2) || 
           normalized2.contains(normalized1);
  }
  
  /// R√©cup√®re les gares connect√©es avec filtrage par nom
  static Future<List<Station>> getConnectedStationsWithFilter(
    Station departureStation, 
    String searchQuery
  ) async {
    final allConnectedStations = await getConnectedStations(departureStation);
    
    if (searchQuery.isEmpty) {
      return allConnectedStations;
    }
    
    final query = searchQuery.toLowerCase();
    return allConnectedStations.where((station) =>
      station.name.toLowerCase().contains(query) ||
      (station.description?.toLowerCase().contains(query) ?? false)
    ).toList();
  }

  /// Normalise un nom de gare pour la comparaison
  static String _normalizeStationName(String name) {
    return name
        .toLowerCase()
        .replaceAll(RegExp(r'[\(\)-]'), '') // Supprime parenth√®ses, tirets
        .replaceAll(RegExp(r'\s+'), ' ') // Remplace multiples espaces par un seul
        .trim();
  }
}